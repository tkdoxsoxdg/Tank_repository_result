using UnityEngine;

public class CameraControl : MonoBehaviour
{
    public float m_DampTime = 0.2f;   //カメラが再度フォーカスするのに必要なおおよその時間
    public float m_ScreenEdgeBuffer = 4f; //最上/最下のターゲットと両面端の間のスペース
    public float m_MinSize = 6.5f; //かめらに可能な最小の平行投影サイズ
    /*[HideInInspector]*/ public Transform[] m_Targets; //カメラが含む必要のあるすべてのターゲット


    private Camera m_Camera; //カメラの参照に使用
    private float m_ZoomSpeed; //平行投影サイズを穏やかに縮小するための参照速度
    private Vector3 m_MoveVelocity; //穏やかに移動するための参照速度
    private Vector3 m_DesiredPosition; //カメラが移動する目的位置
    


    private void Awake()
    {
        m_Camera = GetComponentInChildren<Camera>();
    }


    private void FixedUpdate()
    {
        //任意の位置にカメラを移動
        Move();

        //カメラを基本のサイズに変更
        Zoom();
    }


    private void Move()
    {
        //ターゲットの中間点を見つける
        FindAveragePosition();

        //m_MoveVelocityにて設定した値にて、穏やかにその位置に移動
        transform.position = Vector3.SmoothDamp(transform.position, m_DesiredPosition, ref m_MoveVelocity, m_DampTime);
    }


    private void FindAveragePosition()
    {
        Vector3 averagePos = new Vector3();
        int numTargets = 0;

        //全てのターゲットをチェックし、それらの位置を合計する
        for (int i = 0; i < m_Targets.Length; i++)
        {
            //そのターゲットがアクティブでない場合は、次をチェックする。
            if (!m_Targets[i].gameObject.activeSelf)
                continue;

            //averagePosに位置の値を追加して、ターゲットの数を増加する。
            averagePos += m_Targets[i].position;
            numTargets++;
        }

        //　ターゲットの数が0でなければ、位置の値の合計をターゲット数で割り、中間点を求める。
        if (numTargets > 0)
            averagePos /= numTargets;

        //y値で同じことを実行する
        averagePos.y = transform.position.y;

        // DesiredPosition(目的位置)を中間点にする
        m_DesiredPosition = averagePos;
    }


    private void Zoom()
    {
        //DesiredPosition(目的位置)に基づいて必要サイズを求め、サイズ変更する際は「穏やかに」変更する。
        float requiredSize = FindRequiredSize();
        m_Camera.orthographicSize = Mathf.SmoothDamp(m_Camera.orthographicSize, requiredSize, ref m_ZoomSpeed, m_DampTime);
    }


    private float FindRequiredSize()
    {
        //ローカル空間でカメラリグが移動する位置を見つける
        Vector3 desiredLocalPos = transform.InverseTransformPoint(m_DesiredPosition);

        //カメラサイズの初期化
        float size = 0f;
    　　
        //全てのターゲットｗｐチェックする
        for (int i = 0; i < m_Targets.Length; i++)
        {
            //ターゲットがアクティブじゃないときの挙動→月のターゲットをチェックする。
            if (!m_Targets[i].gameObject.activeSelf)
                continue;

            //アクティブだった場合、亀rなおローカル空間のターゲット位置を見つける
            Vector3 targetLocalPos = transform.InverseTransformPoint(m_Targets[i].position);

            //ローカル空間（カメラ）のDesiredPosition(目的位置)からのターゲットを見つける
            Vector3 desiredPosToTarget = targetLocalPos - desiredLocalPos;

            //現在のサイズとカメラからタンクまでの距離（上下）を比較し、大きい方を選ぶ。
            size = Mathf.Max (size, Mathf.Abs (desiredPosToTarget.y));

            //現在のサイズとカメラからタンクまでの左右の距離を比較し、大きい方を選択。
            size = Mathf.Max (size, Mathf.Abs (desiredPosToTarget.x) / m_Camera.aspect);
	    
        }

        //サイズにエッジバッファを追加
        size += m_ScreenEdgeBuffer;

        //カメラサイズが最小値より小さくならないように設定
        size = Mathf.Max(size, m_MinSize);

        return size;
    }


    public void SetStartPositionAndSize()
    {
        //目的位置を呼び出す
        FindAveragePosition();

        //カメラ位置をDesiredPosition(目的位置)に設定
        transform.position = m_DesiredPosition;

        //カメラの必要サイズを見つけ、設定する。
        m_Camera.orthographicSize = FindRequiredSize();
    }
}

